--// CONFIG
local Settings = {
    Enabled = false,
    Box = false,
    Name = false,
    HealthBar = false,
    HealthText = false,
    Distance = false,
    Tool = false,
    Skeleton = false
}


--// SERVICES
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

--// TABLES
local ESPTable = {}

--// HELPER: Create Text Drawing
local function NewText(size, color)
    local text = Drawing.new("Text")
    text.Size = size
    text.Color = color
    text.Center = true
    text.Outline = true
    text.Visible = false
    return text
end

--// CREATE ESP OBJECTS
local function CreateESP(player)
    if player == LocalPlayer or ESPTable[player] then return end

    local esp = {}

    local box = Drawing.new("Square")
    box.Thickness = 1
    box.Color = Color3.new(1, 1, 1)
    box.Filled = false
    box.Visible = false
    esp.Box = box

    local healthBar = Drawing.new("Line")
    healthBar.Thickness = 2
    healthBar.Visible = false
    esp.HealthBar = healthBar

    esp.Name = NewText(14, Color3.new(1, 1, 1))
    esp.Distance = NewText(13, Color3.fromRGB(150, 200, 255))
    esp.Tool = NewText(13, Color3.fromRGB(200, 200, 200))
    esp.HealthText = NewText(13, Color3.fromRGB(255, 255, 255))

    esp.Skeleton = {}
    if Settings.Skeleton then
        for i = 1, 20 do
            local line = Drawing.new("Line")
            line.Thickness = 1
            line.Color = Color3.new(1, 1, 1)
            line.Visible = false
            table.insert(esp.Skeleton, line)
        end
    end

    ESPTable[player] = esp
end

--// REMOVE ESP
local function RemoveESP(player)
    local esp = ESPTable[player]
    if esp then
        for _, v in pairs(esp) do
            if typeof(v) == "table" then
                for _, line in pairs(v) do
                    if line and line.Remove then
                        line:Remove()
                    end
                end
            elseif v and v.Remove then
                v:Remove()
            end
        end
        ESPTable[player] = nil
    end
end

--// CLEANUP
Players.PlayerRemoving:Connect(RemoveESP)

--// MAIN LOOP
RunService.RenderStepped:Connect(function()
    if not Settings.Enabled then
        for _, esp in pairs(ESPTable) do
            for _, v in pairs(esp) do
                if typeof(v) == "table" then
                    for _, line in pairs(v) do
                        line.Visible = false
                    end
                else
                    v.Visible = false
                end
            end
        end
        return
    end

    for _, player in ipairs(Players:GetPlayers()) do
        if player == LocalPlayer then continue end

        if not ESPTable[player] then
            CreateESP(player)
        end

        local character = player.Character
        local humanoid = character and character:FindFirstChildOfClass("Humanoid")
        local hrp = character and character:FindFirstChild("HumanoidRootPart")
        local head = character and character:FindFirstChild("Head")
        local esp = ESPTable[player]

        if humanoid and humanoid.Health > 0 and hrp and head then
            local topWorld = head.Position + Vector3.new(0, 0.5, 0)
            local bottomWorld = hrp.Position - Vector3.new(0, 2.5, 0)

            local topPos, onScreenTop = Camera:WorldToViewportPoint(topWorld)
            local bottomPos, onScreenBottom = Camera:WorldToViewportPoint(bottomWorld)

            if onScreenTop and onScreenBottom then
                local height = math.abs(topPos.Y - bottomPos.Y)
                local width = height / 2
                local x, y = bottomPos.X - width / 2, topPos.Y
                local centerX = bottomPos.X

                if Settings.Box then
                    esp.Box.Position = Vector2.new(x, y)
                    esp.Box.Size = Vector2.new(width, height)
                    esp.Box.Visible = true
                else
                    esp.Box.Visible = false
                end

                if Settings.HealthBar then
                    local hpPercent = math.clamp(humanoid.Health / humanoid.MaxHealth, 0, 1)
                    local barBottom = y + height
                    local barTop = barBottom - (height * hpPercent)

                    esp.HealthBar.From = Vector2.new(x - 4, barBottom)
                    esp.HealthBar.To = Vector2.new(x - 4, barTop)
                    esp.HealthBar.Color = Color3.fromRGB(255 - 255 * hpPercent, 255 * hpPercent, 0)
                    esp.HealthBar.Visible = true

                    if Settings.HealthText then
                        esp.HealthText.Text = string.format("%dhp", math.floor(humanoid.Health))
                        esp.HealthText.Position = Vector2.new(x - 20, barTop)
                        esp.HealthText.Color = esp.HealthBar.Color
                        esp.HealthText.Visible = true
                    else
                        esp.HealthText.Visible = false
                    end
                else
                    esp.HealthBar.Visible = false
                    if Settings.HealthText then
                        esp.HealthText.Text = string.format("%dhp", math.floor(humanoid.Health))
                        esp.HealthText.Position = Vector2.new(x - 20, y + height)
                        esp.HealthText.Color = Color3.new(1, 1, 1)
                        esp.HealthText.Visible = true
                    else
                        esp.HealthText.Visible = false
                    end
                end

                if Settings.Name then
                    esp.Name.Text = player.DisplayName
                    esp.Name.Position = Vector2.new(centerX, y - 18)
                    esp.Name.Visible = true
                else
                    esp.Name.Visible = false
                end

                local labelY = y + height + 2

                if Settings.Distance then
                    local dist = (Camera.CFrame.Position - hrp.Position).Magnitude
                    esp.Distance.Text = string.format("%.0f", dist) .. "s"
                    esp.Distance.Position = Vector2.new(centerX, labelY)
                    esp.Distance.Visible = true
                    labelY = labelY + 14
                else
                    esp.Distance.Visible = false
                end

                if Settings.Tool then
                    local tool = character:FindFirstChildOfClass("Tool")
                    esp.Tool.Text = tool and tool.Name or ""
                    esp.Tool.Position = Vector2.new(centerX, labelY)
                    esp.Tool.Visible = true
                else
                    esp.Tool.Visible = false
                end

                if Settings.Skeleton then
                    local function getPos(partName)
                        local part = character:FindFirstChild(partName)
                        if part then
                            local pos, onScreen = Camera:WorldToViewportPoint(part.Position)
                            if onScreen then
                                return Vector2.new(pos.X, pos.Y)
                            end
                        end
                        return nil
                    end

                    local skeletonPoints = {
                        head = getPos("Head"),
                        neck = getPos("UpperTorso") or getPos("Torso") or getPos("HumanoidRootPart"),
                        root = getPos("HumanoidRootPart"),
                        leftUpperArm = getPos("LeftUpperArm"),
                        leftLowerArm = getPos("LeftLowerArm"),
                        leftHand = getPos("LeftHand"),
                        rightUpperArm = getPos("RightUpperArm"),
                        rightLowerArm = getPos("RightLowerArm"),
                        rightHand = getPos("RightHand"),
                        leftUpperLeg = getPos("LeftUpperLeg"),
                        leftLowerLeg = getPos("LeftLowerLeg"),
                        leftFoot = getPos("LeftFoot"),
                        rightUpperLeg = getPos("RightUpperLeg"),
                        rightLowerLeg = getPos("RightLowerLeg"),
                        rightFoot = getPos("RightFoot"),
                        torso = getPos("UpperTorso") or getPos("Torso") or getPos("HumanoidRootPart")
                    }

                    local lines = {
                        {skeletonPoints.head, skeletonPoints.neck},
                        {skeletonPoints.neck, skeletonPoints.leftUpperArm},
                        {skeletonPoints.leftUpperArm, skeletonPoints.leftLowerArm},
                        {skeletonPoints.leftLowerArm, skeletonPoints.leftHand},
                        {skeletonPoints.neck, skeletonPoints.rightUpperArm},
                        {skeletonPoints.rightUpperArm, skeletonPoints.rightLowerArm},
                        {skeletonPoints.rightLowerArm, skeletonPoints.rightHand},
                        {skeletonPoints.neck, skeletonPoints.torso},
                        {skeletonPoints.torso, skeletonPoints.leftUpperLeg},
                        {skeletonPoints.leftUpperLeg, skeletonPoints.leftLowerLeg},
                        {skeletonPoints.leftLowerLeg, skeletonPoints.leftFoot},
                        {skeletonPoints.torso, skeletonPoints.rightUpperLeg},
                        {skeletonPoints.rightUpperLeg, skeletonPoints.rightLowerLeg},
                        {skeletonPoints.rightLowerLeg, skeletonPoints.rightFoot}
                    }

                    for i, line in ipairs(esp.Skeleton) do
                        local points = lines[i]
                        if points and points[1] and points[2] then
                            line.From = points[1]
                            line.To = points[2]
                            line.Color = Color3.new(1, 1, 1)
                            line.Visible = true
                        else
                            line.Visible = false
                        end
                    end
                else
                    for _, line in ipairs(esp.Skeleton) do
                        line.Visible = false
                    end
                end

            else
                for _, v in pairs(esp) do
                    if typeof(v) == "table" then
                        for _, line in pairs(v) do
                            line.Visible = false
                        end
                    else
                        v.Visible = false
                    end
                end
            end
        else
            for _, v in pairs(esp) do
                if typeof(v) == "table" then
                    for _, line in pairs(v) do
                        line.Visible = false
                    end
                else
                    v.Visible = false
                end
            end
        end
    end
end)
return {
    Settings = Settings
}
