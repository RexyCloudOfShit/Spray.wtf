-- ESP Library
local ESP = {}
ESP.Settings = {
    Enabled = false,

    Box = {Enabled = false, Color = Color3.new(1,1,1)},
    BoxFilled = {Enabled = false, Color1 = Color3.new(1,1,1), Color2 = Color3.new(1,1,1), Rotate = false, RotateSpeed = 31},

    HealthBar = {Enabled = false, Color1 = Color3.fromRGB(0,255,0), Color2 = Color3.fromRGB(255,0,0)},
    HealthText = {Enabled = false, Color = Color3.new(1,1,1)},

    Weapon = {Enabled = false, Color = Color3.new(1,1,1)},

    Skeleton = {Enabled = false, Color = Color3.new(1,1,1), Thickness = 1},

    Chams = {Enabled = false, Color = Color3.new(1,1,1), VisCheck = false},

    Arrows = {Enabled = false, Color = Color3.new(1,1,1), Radius = 100},

    Highlight = {Enabled = false, Color = Color3.new(1,1,0), Target = nil}
}

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

local ESPTable = {}

-- Helper to create Text
local function NewText(size, color)
    local t = Drawing.new("Text")
    t.Size = size
    t.Color = color
    t.Center = true
    t.Outline = true
    t.Visible = false
    return t
end

-- Helper to create Line
local function NewLine(thickness, color)
    local l = Drawing.new("Line")
    l.Thickness = thickness or 1
    l.Color = color or Color3.new(1,1,1)
    l.Visible = false
    return l
end

-- Helper to create Square
local function NewSquare()
    local sq = Drawing.new("Square")
    sq.Visible = false
    sq.Filled = false
    sq.Thickness = 1
    sq.Color = Color3.new(1,1,1)
    return sq
end

-- Helper to create Filled Square with gradient support
local function NewFilledSquare()
    local sq = Drawing.new("Square")
    sq.Visible = false
    sq.Filled = true
    sq.Thickness = 1
    sq.Color = Color3.new(1,1,1)
    sq.Transparency = 0.4
    return sq
end

-- Create ESP objects for player
local function CreateESP(player)
    if player == LocalPlayer or ESPTable[player] then return end

    local esp = {}

    esp.Box = NewSquare()
    esp.BoxFilled = NewFilledSquare()

    esp.HealthBar = NewLine(3, ESP.Settings.HealthBar.Color1)
    esp.HealthText = NewText(13, ESP.Settings.HealthText.Color)

    esp.Name = NewText(14, Color3.new(1,1,1))
    esp.Distance = NewText(13, Color3.new(1,1,1))
    esp.Weapon = NewText(13, Color3.new(1,1,1))

    esp.Skeleton = {}
    for i=1,15 do
        local l = NewLine(ESP.Settings.Skeleton.Thickness, ESP.Settings.Skeleton.Color)
        table.insert(esp.Skeleton, l)
    end

    esp.Arrow = nil

    -- For chams, store references for highlights
    esp.ChamsHighlight = nil

    ESPTable[player] = esp
end

-- Remove ESP
local function RemoveESP(player)
    local esp = ESPTable[player]
    if esp then
        for _, v in pairs(esp) do
            if type(v) == "table" then
                for _, d in pairs(v) do
                    if d and d.Remove then d:Remove() end
                end
            elseif v and v.Remove then
                v:Remove()
            end
        end
        ESPTable[player] = nil
    end
end

Players.PlayerRemoving:Connect(RemoveESP)

-- Utility: World to screen vector2 or nil if offscreen
local function WorldToScreenVec3(vec3)
    local pos, onScreen = Camera:WorldToViewportPoint(vec3)
    if onScreen then
        return Vector2.new(pos.X, pos.Y)
    else
        return nil
    end
end

-- Draw Skeleton (supports R6 & R15)
local function DrawSkeleton(esp, character)
    local function getPart(name)
        return character:FindFirstChild(name)
    end

    local function drawLine(idx, fromP, toP)
        if fromP and toP then
            local fromPos = WorldToScreenVec3(fromP.Position)
            local toPos = WorldToScreenVec3(toP.Position)
            if fromPos and toPos then
                esp.Skeleton[idx].From = fromPos
                esp.Skeleton[idx].To = toPos
                esp.Skeleton[idx].Visible = true
                esp.Skeleton[idx].Color = ESP.Settings.Skeleton.Color
                esp.Skeleton[idx].Thickness = ESP.Settings.Skeleton.Thickness
                return
            end
        end
        esp.Skeleton[idx].Visible = false
    end

    local rigType = character.Humanoid.RigType

    if rigType == Enum.HumanoidRigType.R6 then
        -- R6 Skeleton Lines
        local head = getPart("Head")
        local torso = getPart("Torso")
        local leftArm = getPart("Left Arm")
        local rightArm = getPart("Right Arm")
        local leftLeg = getPart("Left Leg")
        local rightLeg = getPart("Right Leg")

        drawLine(1, head, torso)
        drawLine(2, torso, leftArm)
        drawLine(3, torso, rightArm)
        drawLine(4, torso, leftLeg)
        drawLine(5, torso, rightLeg)
        -- Hide remaining lines
        for i=6,15 do
            esp.Skeleton[i].Visible = false
        end
    else
        -- R15 Skeleton Lines
        local head = getPart("Head")
        local upperTorso = getPart("UpperTorso") or getPart("Torso")
        local lowerTorso = getPart("LowerTorso") or getPart("Torso")
        local root = getPart("HumanoidRootPart")

        local leftUpperArm = getPart("LeftUpperArm")
        local leftLowerArm = getPart("LeftLowerArm")
        local leftHand = getPart("LeftHand")

        local rightUpperArm = getPart("RightUpperArm")
        local rightLowerArm = getPart("RightLowerArm")
        local rightHand = getPart("RightHand")

        local leftUpperLeg = getPart("LeftUpperLeg")
        local leftLowerLeg = getPart("LeftLowerLeg")
        local leftFoot = getPart("LeftFoot")

        local rightUpperLeg = getPart("RightUpperLeg")
        local rightLowerLeg = getPart("RightLowerLeg")
        local rightFoot = getPart("RightFoot")

        drawLine(1, head, upperTorso)
        drawLine(2, upperTorso, lowerTorso)
        drawLine(3, lowerTorso, root)

        drawLine(4, upperTorso, leftUpperArm)
        drawLine(5, leftUpperArm, leftLowerArm)
        drawLine(6, leftLowerArm, leftHand)

        drawLine(7, upperTorso, rightUpperArm)
        drawLine(8, rightUpperArm, rightLowerArm)
        drawLine(9, rightLowerArm, rightHand)

        drawLine(10, lowerTorso, leftUpperLeg)
        drawLine(11, leftUpperLeg, leftLowerLeg)
        drawLine(12, leftLowerLeg, leftFoot)

        drawLine(13, lowerTorso, rightUpperLeg)
        drawLine(14, rightUpperLeg, rightLowerLeg)
        drawLine(15, rightLowerLeg, rightFoot)
    end
end

-- Draw Arrows for offscreen players
local function DrawArrows()
    if not ESP.Settings.Arrows.Enabled then return end

    local screenCenter = Vector2.new(Camera.ViewportSize.X/2, Camera.ViewportSize.Y/2)
    local radius = ESP.Settings.Arrows.Radius or 100
    local arrowSize = 10
    local arrowColor = ESP.Settings.Arrows.Color

    for player, esp in pairs(ESPTable) do
        local character = player.Character
        local hrp = character and character:FindFirstChild("HumanoidRootPart")
        local humanoid = character and character:FindFirstChildOfClass("Humanoid")

        if humanoid and humanoid.Health > 0 and hrp then
            local pos, onScreen = Camera:WorldToViewportPoint(hrp.Position)
            if not onScreen then
                local screenPos = Vector2.new(pos.X, pos.Y)
                local direction = (screenPos - screenCenter).Unit
                local arrowPos = screenCenter + direction * radius

                -- Triangle points for arrow
                local perp = Vector2.new(-direction.Y, direction.X) * (arrowSize / 2)
                local tip = arrowPos + direction * arrowSize
                local left = arrowPos - perp
                local right = arrowPos + perp

                if not esp.Arrow then
                    esp.Arrow = Drawing.new("Triangle")
                    esp.Arrow.Filled = true
                    esp.Arrow.Color = arrowColor
                    esp.Arrow.Visible = true
                end

                esp.Arrow.PointA = tip
                esp.Arrow.PointB = left
                esp.Arrow.PointC = right
                esp.Arrow.Color = arrowColor
                esp.Arrow.Visible = true
            else
                if esp.Arrow then esp.Arrow.Visible = false end
            end
        else
            if esp.Arrow then esp.Arrow.Visible = false end
        end
    end
end

-- Update Chams & Highlight
local function UpdateChams()
    if not ESP.Settings.Chams.Enabled and not ESP.Settings.Highlight.Enabled then
        for player, esp in pairs(ESPTable) do
            if esp.ChamsHighlight then
                esp.ChamsHighlight:Destroy()
                esp.ChamsHighlight = nil
            end
        end
        return
    end

    for player, esp in pairs(ESPTable) do
        local character = player.Character
        local hrp = character and character:FindFirstChild("HumanoidRootPart")

        if character and hrp then
            if not esp.ChamsHighlight then
                local highlight = Instance.new("Highlight")
                highlight.Adornee = character
                highlight.FillTransparency = 0.5
                highlight.OutlineTransparency = 0
                highlight.Parent = game:GetService("CoreGui")
                esp.ChamsHighlight = highlight
            end

            if ESP.Settings.Highlight.Enabled and ESP.Settings.Highlight.Target == player then
                esp.ChamsHighlight.FillColor = ESP.Settings.Highlight.Color
                esp.ChamsHighlight.OutlineColor = ESP.Settings.Highlight.Color
            else
                esp.ChamsHighlight.FillColor = ESP.Settings.Chams.Color
                esp.ChamsHighlight.OutlineColor = ESP.Settings.Chams.Color
            end
        else
            if esp.ChamsHighlight then
                esp.ChamsHighlight:Destroy()
                esp.ChamsHighlight = nil
            end
        end
    end
end

-- Main update function called every RenderStep
local function Update()
    if not ESP.Settings.Enabled then
        -- Hide all
        for player, esp in pairs(ESPTable) do
            for _, obj in pairs(esp) do
                if type(obj) == "table" then
                    for _, d in pairs(obj) do
                        if d and d.Visible ~= nil then d.Visible = false end
                    end
                elseif obj and obj.Visible ~= nil then
                    obj.Visible = false
                end
            end
        end
        return
    end

    local screenSize = Vector2.new(Camera.ViewportSize.X, Camera.ViewportSize.Y)
    local screenCenter = screenSize/2

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            if not ESPTable[player] then
                CreateESP(player)
            end

            local esp = ESPTable[player]
            local character = player.Character
            local humanoid = character and character:FindFirstChildOfClass("Humanoid")
            local hrp = character and character:FindFirstChild("HumanoidRootPart")

            if humanoid and humanoid.Health > 0 and hrp then
                -- Calculate box corners & position

                local size3 = Vector3.new(2, 5, 1) -- Default box size (can be improved by rig part sizes)
                local rootPos = hrp.Position

                local c0 = Camera:WorldToViewportPoint(rootPos + Vector3.new(-size3.X/2, size3.Y/2, 0))
                local c1 = Camera:WorldToViewportPoint(rootPos + Vector3.new(size3.X/2, -size3.Y/2, 0))

                if c0.Z > 0 and c1.Z > 0 then
                    local topLeft = Vector2.new(c0.X, c0.Y)
                    local bottomRight = Vector2.new(c1.X, c1.Y)

                    -- Box
                    if ESP.Settings.Box.Enabled then
                        local box = esp.Box
                        box.Visible = true
                        box.Color = ESP.Settings.Box.Color
                        box.Thickness = 1
                        box.Filled = false
                        box.Position = topLeft
                        box.Size = Vector2.new(bottomRight.X - topLeft.X, bottomRight.Y - topLeft.Y)
                    else
                        esp.Box.Visible = false
                    end

                    -- Filled Box
                    if ESP.Settings.BoxFilled.Enabled then
                        local fb = esp.BoxFilled
                        fb.Visible = true
                        fb.Color = ESP.Settings.BoxFilled.Color1:Lerp(ESP.Settings.BoxFilled.Color2, 0.5)
                        fb.Position = topLeft
                        fb.Size = Vector2.new(bottomRight.X - topLeft.X, bottomRight.Y - topLeft.Y)
                    else
                        esp.BoxFilled.Visible = false
                    end

                    -- Health Bar (vertical on left side)
                    if ESP.Settings.HealthBar.Enabled then
                        local hpRatio = math.clamp(humanoid.Health / humanoid.MaxHealth, 0, 1)
                        local hHeight = (bottomRight.Y - topLeft.Y) * hpRatio

                        local topColor = ESP.Settings.HealthBar.Color1 or Color3.fromRGB(0,255,0)
                        local bottomColor = ESP.Settings.HealthBar.Color2 or Color3.fromRGB(255,0,0)

                        -- Draw gradient health bar
                        local healthBar = esp.HealthBar
                        healthBar.Visible = true
                        healthBar.Thickness = 5
                        healthBar.Color = topColor:Lerp(bottomColor, 1 - hpRatio)
                        healthBar.From = Vector2.new(topLeft.X - 8, bottomRight.Y)
                        healthBar.To = Vector2.new(topLeft.X - 8, bottomRight.Y - hHeight)

                    else
                        esp.HealthBar.Visible = false
                    end

                    -- Health Text left side of health bar
                    if ESP.Settings.HealthText.Enabled then
                        local healthText = esp.HealthText
                        healthText.Visible = true
                        healthText.Text = tostring(math.floor(humanoid.Health)) .. " HP"
                        healthText.Position = Vector2.new(topLeft.X - 35, bottomRight.Y - ((bottomRight.Y - topLeft.Y) * (humanoid.Health / humanoid.MaxHealth)))
                    else
                        esp.HealthText.Visible = false
                    end

                    -- Distance below box
                    local distanceText = esp.Distance
                    if distanceText then
                        distanceText.Visible = true
                        local dist = (LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and
                            (LocalPlayer.Character.HumanoidRootPart.Position - rootPos).Magnitude) or 0
                        distanceText.Text = string.format("%.0f studs", dist)
                        distanceText.Position = Vector2.new(topLeft.X + (bottomRight.X - topLeft.X)/2, bottomRight.Y + 5)
                    end

                    -- Weapon/tool below distance
                    local weaponText = esp.Weapon
                    if ESP.Settings.Weapon.Enabled then
                        local toolName = ""
                        local backpack = player:FindFirstChildOfClass("Backpack")
                        if backpack then
                            for _, tool in pairs(backpack:GetChildren()) do
                                if tool:IsA("Tool") then
                                    toolName = tool.Name
                                    break
                                end
                            end
                        end
                        -- Also check if equipped tool
                        if character then
                            for _, child in pairs(character:GetChildren()) do
                                if child:IsA("Tool") then
                                    toolName = child.Name
                                end
                            end
                        end

                        weaponText.Visible = true
                        weaponText.Text = toolName ~= "" and toolName or "No Tool"
                        weaponText.Position = Vector2.new(topLeft.X + (bottomRight.X - topLeft.X)/2, bottomRight.Y + 20)
                    else
                        weaponText.Visible = false
                    end

                    -- Skeleton
                    if ESP.Settings.Skeleton.Enabled then
                        DrawSkeleton(esp, character)
                    else
                        for _, l in pairs(esp.Skeleton) do l.Visible = false end
                    end
                else
                    -- Offscreen, hide box and skeleton
                    esp.Box.Visible = false
                    esp.BoxFilled.Visible = false
                    esp.HealthBar.Visible = false
                    esp.HealthText.Visible = false
                    esp.Distance.Visible = false
                    esp.Weapon.Visible = false
                    for _, l in pairs(esp.Skeleton) do l.Visible = false end
                end
            else
                -- Dead or no character
                esp.Box.Visible = false
                esp.BoxFilled.Visible = false
                esp.HealthBar.Visible = false
                esp.HealthText.Visible = false
                esp.Distance.Visible = false
                esp.Weapon.Visible = false
                for _, l in pairs(esp.Skeleton) do l.Visible = false end
            end
        end
    end

    -- Draw arrows after player updates
    DrawArrows()

    -- Update Chams and highlight
    UpdateChams()
end

-- Connect to RenderStepped
RunService.RenderStepped:Connect(Update)

return ESP
